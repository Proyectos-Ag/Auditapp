#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('server:server');
var https = require('https');
var http = require('http');
var fs = require('fs');
var dotenv = require('dotenv');
var os = require('os');  // ← AÑADIR ESTO

dotenv.config();

/**
 * Obtener IP local automáticamente
 */
function getLocalIP() {
  const interfaces = os.networkInterfaces();
  for (const name of Object.keys(interfaces)) {
    for (const iface of interfaces[name]) {
      // Buscar IPv4 que no sea localhost y no sea virtual
      if (iface.family === 'IPv4' && !iface.internal && !name.includes('VirtualBox')) {
        return iface.address;
      }
    }
  }
  return '0.0.0.0';
}

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3002');
var httpsPort = normalizePort(process.env.HTTPS_PORT || '3443');
var host = process.env.HOST || getLocalIP();  // ← AÑADIR ESTO

app.set('port', port);

/**
 * Configuración SSL
 */
var httpsOptions = {
  key: fs.readFileSync('./key.pem'),
  cert: fs.readFileSync('./cert.pem')
};

/**
 * Create HTTPS server.
 */
var httpsServer = https.createServer(httpsOptions, app);

/**
 * Create HTTP server (opcional, para redirigir a HTTPS)
 */
var httpServer = http.createServer(function(req, res) {
  res.writeHead(301, { "Location": "https://" + req.headers['host'].split(':')[0] + ':' + httpsPort + req.url });
  res.end();
});

/**
 * Listen on provided port, on all network interfaces.
 */
httpsServer.listen(httpsPort, host);  // ← USA LA VARIABLE host
httpsServer.on('error', onError);
httpsServer.on('listening', function() {
  console.log('HTTPS Server listening on ' + host + ':' + httpsPort);  // ← MOSTRAR IP
});

// Servidor HTTP solo para redirección
httpServer.listen(port, host);  // ← USA LA VARIABLE host
httpServer.on('listening', function() {
  console.log('HTTP Server listening on ' + host + ':' + port + ' (redirecting to HTTPS)');  // ← MOSTRAR IP
});

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) {
    return val;
  }
  if (port >= 0) {
    return port;
  }
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;
  
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}