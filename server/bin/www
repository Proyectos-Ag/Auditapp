#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
var https = require('https');
var fs = require('fs');
var path = require('path');

/**
 * Get port from environment and store in Express.
 */

var httpPort = normalizePort(process.env.PORT || '3002');
var httpsPort = normalizePort(process.env.HTTPS_PORT || '3443');

app.set('port', httpPort);

/**
 * Create HTTP server.
 */

var httpServer = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

httpServer.listen(httpPort, '0.0.0.0', () => {
  console.log('=================================');
  console.log('🚀 Servidor HTTP iniciado');
  console.log('=================================');
  console.log('📡 Puerto HTTP:', httpPort);
  console.log('🌐 Local: http://localhost:' + httpPort);
  console.log('🌐 Red: http://192.168.100.30:' + httpPort);
  console.log('🔧 Entorno:', process.env.NODE_ENV || 'development');
  console.log('=================================');
});

httpServer.on('error', onError);

/**
 * Create HTTPS server
 */

try {
  // Rutas a los certificados SSL
  const keyPath = path.join(__dirname, '../ssl/key.pem');
  const certPath = path.join(__dirname, '../ssl/cert.pem');
  
  console.log('📂 Buscando certificados SSL...');
  console.log('   Key:', keyPath);
  console.log('   Cert:', certPath);
  
  const privateKey = fs.readFileSync(keyPath, 'utf8');
  const certificate = fs.readFileSync(certPath, 'utf8');
  
  const credentials = { key: privateKey, cert: certificate };
  var httpsServer = https.createServer(credentials, app);

  httpsServer.listen(httpsPort, '0.0.0.0', () => {
    console.log('=================================');
    console.log('🔒 Servidor HTTPS iniciado');
    console.log('=================================');
    console.log('📡 Puerto HTTPS:', httpsPort);
    console.log('🌐 Local: https://localhost:' + httpsPort);
    console.log('🌐 Red: https://192.168.100.30:' + httpsPort);
    console.log('⚠️  Certificado autofirmado - El navegador mostrará advertencia');
    console.log('=================================');
  });

  httpsServer.on('error', onError);
} catch (err) {
  console.error('❌ Error al cargar certificados SSL:', err.message);
  console.log('⚠️  Solo servidor HTTP disponible');
  console.log('💡 Para habilitar HTTPS:');
  console.log('   1. cd ssl');
  console.log('   2. openssl req -nodes -new -x509 -keyout key.pem -out cert.pem -days 365');
  console.log('=================================');
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof this.address === 'function'
    ? 'Port ' + this.address().port
    : 'Port';

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}